@model DashboardViewModel
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard de Manutenções</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    /* Reset básico */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Roboto', sans-serif;
      background-color: #f8f9fa;
      color: #333;
    }

    .container {
      max-width: 1200px;
      margin: 20px auto;
      padding: 20px;
    }

    .header {
      text-align: center;
      margin-bottom: 40px;
    }

    .header h1 {
      font-size: 2.5rem;
      color: #007bff;
      margin-bottom: 10px;
    }

    .header p {
      font-size: 1.1rem;
      color: #666;
    }

    .dashboard {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 40px;
    }

    .card {
      background: white;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 20px;
      text-align: center;
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .card h3 {
      font-size: 2rem;
      margin-bottom: 10px;
      color: #007bff;
    }

    .card p {
      font-size: 1rem;
      color: #666;
      margin-bottom: 15px;
    }

    .card a {
      text-decoration: none;
      color: #007bff;
      font-weight: 500;
      display: inline-block;
      margin-top: 10px;
    }

    .card a:hover {
      text-decoration: underline;
    }

    .quick-actions {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 15px;
      margin-bottom: 40px;
    }

    .quick-action {
      background: white;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 20px;
      text-align: center;
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .quick-action:hover {
      transform: translateY(-5px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .quick-action i {
      font-size: 2rem;
      color: #007bff;
      margin-bottom: 10px;
    }

    .quick-action span {
      font-size: 1rem;
      color: #333;
      display: block;
    }

    .charts {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
    }

    .chart {
      background: white;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 20px;
    }

    .chart h4 {
      font-size: 1.2rem;
      margin-bottom: 20px;
      color: #007bff;
    }

    .chart canvas {
      width: 100% !important;
      height: 200px !important;
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Cabeçalho -->

    <!-- Cards de Estatísticas -->
  <div class="dashboard">
    <div class="card">
        <h3>@Model.DeviceCount</h3>
        <p>Dispositivos</p>
        <a href="/Devices/List">Ver detalhes</a>
    </div>
    
  <div class="card">
    <h3 id="cpuUsage">@Model.CpuUsage.ToString("N1")%</h3>
    <p>Uso de CPU</p>
</div>

<div class="card">
    <h3 id="memoryUsage">@Model.MemoryUsage.ToString("N1")%</h3>
    <p>Uso de Memória</p>
</div>
    
    <div class="card">
        <h3>@Model.MaintenanceCount</h3>
        <p>Manutenções Registradas</p>
        <a href="/Maintenances/MaintenanceList">Ver todas</a>
    </div>
</div>

    <!-- Ações Rápidas -->
    <div class="quick-actions">
      <div class="quick-action">
          <a href="/Stocks/SearchProduct">
        <i class="fas fa-barcode"></i>
        <span>Estoque</span>
          </a>
      </div>
      <div class="quick-action">
        <a href="/Maintenances/MaintenanceList">
        <i class="fas fa-file"></i>
        <span>Manutenções</span>
        </a>
      </div>
      <div class="quick-action">
        <a href="/Users/GetAll">
        <i class="fas fa-users"></i>
        <span>Usuarios</span>
        </a>
      </div>
      <div class="quick-action">
         <a href="/Sectors/GetAll">
        <i class="fas fa-home"></i>
        <span>Setores</span>
        </a>
      </div>
      <div class="quick-action">
        <a href="/Devices/List">
        <i class="fas fa-laptop"></i>
        <span>Dispositivos</span>
        </a>
      </div>
      <div class="quick-action">
        <a href="/Documents/FileUpload">
        <i class="fas fa-server"></i>
        <span>Arquivos</span>
        </a>
      </div>
    </div>

    <!-- Gráficos -->
    <div class="charts">
      <div class="chart">
        <h4>Uso de Memória</h4>
        <canvas id="memoryChart"></canvas>
      </div>
      <div class="chart">
        <h4>Manutenções por Mês</h4>
        <canvas id="maintenanceChart"></canvas>
      </div>
    </div>
  </div>

  <!-- Scripts para Gráficos (Chart.js) -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
   let memoryChart, maintenanceChart;

function initCharts(initialData, maintenanceData) {
    // Gráfico de Memória
    memoryChart = new Chart(document.getElementById('memoryChart'), {
        type: 'doughnut',
        data: {
            labels: ['Usada', 'Livre'],
            datasets: [{
                data: [initialData.memory, 100 - initialData.memory],
                backgroundColor: ['#ff6384', '#36a2eb']
            }]
        }
    });

    // Gráfico de Manutenções com dados reais
    maintenanceChart = new Chart(document.getElementById('maintenanceChart'), {
        type: 'bar',
        data: {
            labels: Object.keys(maintenanceData),
            datasets: [{
                label: 'Manutenções',
                data: Object.values(maintenanceData),
                backgroundColor: '#007bff'
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

// Atualização periódica
setInterval(async () => {
    try {
        const response = await fetch('/server/status/resources');
        const data = await response.json();
        
        // Atualiza os cards
        document.getElementById('cpuUsage').textContent = `${data.cpu}%`;
        document.getElementById('memoryUsage').textContent = `${data.memory}%`;
        
        // Atualiza os gráficos
        memoryChart.data.datasets[0].data = [data.memory, 100 - data.memory];
        memoryChart.update();
        
    } catch (error) {
        console.error('Erro na atualização:', error);
    }
}, 5000);

// Inicialização
document.addEventListener('DOMContentLoaded', () => {
    initCharts(
        {
            cpu: @Model.CpuUsage,
            memory: @Model.MemoryUsage
        },
        @Json.Serialize(Model.MaintenancesByMonth)
    );
});
    </script>
</body>
</html>