@using ControllRR.Domain.Entities
@using ControllRR.Domain.Enums
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@model ControllRR.Presentation.ViewModels.StockViewModel
@{
    ViewData["Title"] = "Detalhes Produto";
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
    @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
    @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
}
<!-- Modal para Movimentações -->
<div id="movementModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Adicionar Movimentação</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="movementForm" asp-controller="Stocks" asp-action="AddMovement" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="StockId" name="StockId" />

                    <div class="mb-3">
                        <label class="form-label">Tipo de Movimentação</label>
                        <select class="form-select" name="MovementType" required>
                            <option value="1">Entrada</option>
                            <option value="2">Saída</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Quantidade</label>
                        <input type="number" class="form-control" name="Quantity" required min="1" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Data</label>
                        <input type="date" class="form-control" name="MovementDate" 
                               value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Salvar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid px-4">
    <h1 class="mt-4"></h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
        <li class="breadcrumb-item"><a href="/Stock/Index">Estoque</a></li>
        <li class="breadcrumb-item active">Buscar</li>
    </ol>
    <button type="button" class="btn btn-success" 
        data-bs-toggle="modal" 
        data-bs-target="#movementModal"
        onclick="prepareMovementModal()">
    <i class="fas fa-plus me-2"></i>Inserir Movimentação
</button>
</div>
<div class="row">
    <div class="col-md-12">
        <br>

        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header text-center bg-dark text-white">
                            <div class="row align-items-center">
                                <div class="col-md-12">
                                    <h5>::Buscar Item em Estoque::</h5>
                                </div>
                            </div>
                        </div>
                        <div class="card mt-4">
                            <div class="card-header">INFORMAÇÕES::
                            </div>
                            <div class="card-body">
                                <div class="row">

                                    <div class="col">
                                        <label asp-for="StockDto.ProductName" class="control-label"></label>
                                        <input id="productSearch" class="form-control"
                                            placeholder="Procure por modelo, serial ou tipo" />
                                        <input type="hidden" id="productId" name="StockDto.ProductId" />
                                    </div>
                                    <div class="col">
                                        <label asp-for="StockDto.ProductDescription"></label>
                                        <input asp-for="StockDto.ProductDescription" id="StockDto_ProductDescription"
                                            class="form-control" />
                                        <span asp-validation-for="StockDto.ProductDescription"
                                            class="text-danger"></span>
                                    </div>

                                    <div class="col">
                                        <label asp-for="StockDto.ProductApplication"></label>
                                        <input asp-for="StockDto.ProductApplication" id="StockDto_ProductApplication"
                                            class="form-control" />
                                        <span asp-validation-for="StockDto.ProductApplication"
                                            class="text-danger"></span>
                                    </div>

                                    <div class="col">
                                        <label asp-for="StockDto.ProductReference"></label>
                                        <input asp-for="StockDto.ProductReference" id="StockDto_ProductReference"
                                            class="form-control" />
                                        <span asp-validation-for="StockDto.ProductReference" class="text-danger"></span>
                                    </div>
                                    <div class="col">
                                        <label asp-for="StockDto.ProductQuantity"></label>
                                        <input asp-for="StockDto.ProductQuantity" id="StockDto_ProductQuantity"
                                            class="form-control" />
                                        <span asp-validation-for="StockDto.ProductQuantity" class="text-danger"></span>
                                    </div>

                                    <!--  seção abaixo dos campos existentes -->
                                    <div class="card mt-4">
                                        <div class="card-header">Movimentações deste Item</div>
                                        <div class="card-body">
                                            <table class="table table-striped" id="movementsTable">
                                                <thead>
                                                    <tr>
                                                        <th>Data</th>
                                                        <th>Tipo</th>
                                                        <th>Quantidade</th>
                                                        <th>Manutenção Relacionada</th>
                                                    </tr>
                                                </thead>
                                               <tbody id="movementsBody">
                                                    <!--  serão preenchidas via JavaScript -->
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <!--
                                  JAVASCRIPT É COISA DE GENTE QUE NÃO TEM O Q FAZER.
                                  cARALHO CHATO DA PORRA

                                   -->

                                </div>
                           @section Scripts {
    <!-- Remova referências duplicadas do jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">

    <script>
        // Variável para armazenar o termo de busca atual
        let currentSearchTerm = '';
        let currentStockId = null;

        $(document).ready(function () {
            // Configuração do autocomplete
            $("#productSearch").autocomplete({
                source: function (request, response) {
                    currentSearchTerm = request.term;
                    $.ajax({
                        url: '/Stocks/Search',
                        type: 'GET',
                        data: { term: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.productName + " - " + item.productDescription,
                                    value: item.productName,
                                    id: item.id,
                                    desc: item.productDescription,
                                    app: item.productApplication,
                                    ref: item.productReference,
                                    qtt: item.productQuantity,
                                    movements: item.movements
                                };
                            }));
                        }
                    });
                },
                select: function (event, ui) {
                    currentStockId = ui.item.id;
                    updateProductFields(ui.item);
                    return false;
                }
            });

            // Função para atualizar campos do produto
            function updateProductFields(item) {
                $("#productSearch").val(item.label);
                $("#productId").val(item.id);
                $("#StockDto_ProductDescription").val(item.desc);
                $("#StockDto_ProductApplication").val(item.app);
                $("#StockDto_ProductReference").val(item.ref);
                $("#StockDto_ProductQuantity").val(item.qtt);
                updateMovementsTable(item.movements);
            }

            // Função para atualizar a tabela de movimentações
            function updateMovementsTable(movements) {
                const tbody = $("#movementsTable tbody");
                tbody.empty();

                if (movements && movements.length > 0) {
                    movements.forEach(movement => {
                        const movementType = movement.movementType == 1 ? "Entrada" : "Saída";
                        const movementDate = new Date(movement.movementDate).toLocaleDateString('pt-BR');
                        const maintenanceLink = movement.maintenanceId ? 
                            `<a href="/Maintenances/Details/${movement.maintenanceId}" class="btn btn-link">
                                ${movement.maintenanceNumber || 'Ver Manutenção'}
                            </a>` : 
                            'N/A';

                        tbody.append(`
                            <tr>
                                <td>${movementDate}</td>
                                <td>${movementType}</td>
                                <td>${movement.quantity}</td>
                                <td>${maintenanceLink}</td>
                            </tr>
                        `);
                    });
                } else {
                    tbody.append(`
                        <tr>
                            <td colspan="4">Nenhuma movimentação registrada.</td>
                        </tr>
                    `);
                }
            }

            // Submit do formulário de movimentação
            $("#movementForm").submit(function (e) {
                e.preventDefault();

                const formData = {
                    stockId: $("#StockId").val(),
                    type: parseInt($("select[name='MovementType']").val()),
                    quantity: parseInt($("input[name='Quantity']").val()),
                    movementDate: $("input[name='MovementDate']").val(),
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                };

                $.ajax({
                    url: $(this).attr("action"),
                    type: "POST",
                    data: formData,
                    success: async function (response) {
                        if (response.success) {
                            $('#movementModal').modal('hide');
                            
                            // Atualização otimizada dos dados
                            if (currentStockId) {
                                const updatedProduct = await getUpdatedProduct(currentStockId);
                                if (updatedProduct) {
                                    updateProductFields(updatedProduct);
                                }
                            }
                            
                            Swal.fire({
                                icon: 'success',
                                title: 'Sucesso!',
                                text: 'Movimentação registrada com sucesso',
                                timer: 2000
                            });
                        }
                    },
                    error: function (xhr) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Erro!',
                            text: xhr.responseJSON?.message || 'Erro ao processar a solicitação'
                        });
                    }
                });
            });

            // Função para buscar dados atualizados do produto
            async function getUpdatedProduct(stockId) {
                try {
                    const response = await $.get(`/Stocks/GetProduct/${stockId}`);
                    return response;
                } catch (error) {
                    console.error("Erro ao buscar produto:", error);
                    return null;
                }
            }
        });

        function prepareMovementModal() {
            const stockId = $("#productId").val();
            if (!stockId) {
                Product_Error();
                $('#movementModal').modal('hide');
                return;
            }
            $("#StockId").val(stockId);
        }
       
        function Product_Error() {
            Swal.fire({
                icon: "error",
                title: "Seleção necessária",
                text: "Por favor, selecione um produto antes de adicionar movimentações!",
                footer: '<a href="/Help/Documentation/Movements">Guia de movimentações</a>'
            });
        }
    </script>
}